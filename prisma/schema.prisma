datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String          @id @default(cuid())
  name            String?
  email           String?         @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  events          Event[]
  kitItems        KitItem[]
  eventAttendence EventAttendee[]
  comments        Comment[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id          String            @id @default(cuid())
  creator     User              @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String
  description EventDescription?
  coordinates Coordinate[]
  kitItems    KitItem[]
  attendees   EventAttendee[]
  comments    Comment[]
}

model EventDescription {
  id          String          @id @default(cuid())
  event       Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String          @unique
  visibility  VisibilityLevel
  name        String
  description String
  difficulty  Int
  activity    String
  start       String
  end         String
}

enum VisibilityLevel {
  PUBLIC
  UNLISTED
}

model Coordinate {
  id      String @id @default(cuid())
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String
  lat     Float
  lng     Float
  elevation Int?
}

model KitItem {
  id       String   @id @default(cuid())
  event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId  String
  owner    User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId  String
  name     KitItems
  capacity Int?
}

enum KitItems {
  TENT
  STOVE
}

model EventAttendee {
  event   Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String
  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  status  AttendenceStatus

  @@id([eventId, userId])
}

enum AttendenceStatus {
  DECLINED
  INTERESTED
  ACCEPTED
}

model Comment {
  id        String    @id @default(cuid())
  comment   String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String
  Children  Comment[] @relation("Comment_Children")
  parent    Comment?  @relation("Comment_Children", fields: [parentId], references: [id])
  parentId  String?
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  deleted   Boolean   @default(false)
}
